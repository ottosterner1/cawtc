name: Build Cross-Platform Executable

on:
  push:
    branches:
      - main 

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.10.0 openpyxl pandas
    
    - name: Create Version File (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=(1, 0, 0, 0),
            prodvers=(1, 0, 0, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
                StringTable(
                  u'040904B0',
                  [StringStruct(u'FileDescription', u'Wilton Tennis Automation'),
                   StringStruct(u'ProductName', u'Tennis Automation Scripts'),
                   StringStruct(u'ProductVersion', u'1.0.0.0')])
              ]
            ),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )" > version.txt

    - name: Create Password File (Windows)
      if: runner.os == 'Windows'
      env:
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      shell: pwsh
      run: |
        $password = $env:EMAIL_PASSWORD
        Set-Content -Path "email_password.txt" -Value $password -NoNewline

    - name: Create Password File (macOS)
      if: runner.os == 'macOS'
      env:
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      run: |
        echo -n "$EMAIL_PASSWORD" > email_password.txt
        cat email_password.txt  # Debug print to verify file content (will be hidden in logs)

    - name: Build Contact Details Script (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed `
          --name ContactDetailsScript `
          --version-file=version.txt `
          --hidden-import=tkinter `
          --hidden-import=openpyxl `
          --hidden-import=pandas `
          src/contact_details_registers.py

    - name: Build Recommendation Email Script (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed `
          --name RecommendationEmail `
          --version-file=version.txt `
          --add-data "email_password.txt;." `
          src/recommendation-email-automation.py

    - name: Build Contact Details Script (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --windowed \
          --name ContactDetailsScript \
          --hidden-import=tkinter \
          --hidden-import=openpyxl \
          --hidden-import=pandas \
          src/contact_details_registers.py
        chmod +x dist/ContactDetailsScript
        xattr -cr dist/ContactDetailsScript

    - name: Build Recommendation Email Script (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --windowed \
          --name RecommendationEmail \
          --add-data "email_password.txt:." \
          src/recommendation-email-automation.py
        chmod +x dist/RecommendationEmail
        xattr -cr dist/RecommendationEmail

    - name: Remove Password File
      run: |
        rm email_password.txt

    - name: Upload Contact Details Script
      uses: actions/upload-artifact@v3
      with:
        name: ContactDetailsScript-${{ matrix.os }}-py3.12
        path: dist/ContactDetailsScript*

    - name: Upload Recommendation Email Script
      uses: actions/upload-artifact@v3
      with:
        name: RecommendationEmail-${{ matrix.os }}-py3.12
        path: dist/RecommendationEmail*